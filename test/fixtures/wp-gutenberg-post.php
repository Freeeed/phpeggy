<?php
/*
 * Generated by Peggy 1.2.0 with PHPeggy plugin 2.0.0
 *
 * https://peggyjs.org/
 */

namespace PHPeggy;

/* BEGIN Useful functions */
/* chr_unicode - get unicode character from its char code */
if (!function_exists("PHPeggy\\chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}

/* ord_unicode - get unicode char code from string */
if (!function_exists("PHPeggy\\ord_unicode")) {
    function ord_unicode($character) {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}

/* peg_regex_test - multibyte regex test */
if (!function_exists("PHPeggy\\peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (substr($pattern, -1) === "i") {
            return mb_eregi(substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(substr($pattern, 1, -1), $string);
        }
    }
}

/* BEGIN global initializer code */
// The `maybeJSON` function is not needed in PHP because its return semantics
// are the same as `json_decode`

// array arguments are backwards because of PHP
if (!function_exists(__NAMESPACE__ . "\\peg_array_partition")) {
    function peg_array_partition($array, $predicate) {
        $truthy = array();
        $falsey = array();

        foreach ($array as $item) {
            call_user_func($predicate, $item)
                ? $truthy[] = $item
                : $falsey[] = $item;
        }

        return array($truthy, $falsey);
    }
}

if (!function_exists(__NAMESPACE__ . "\\peg_join_blocks")) {
    function peg_join_blocks($pre, $tokens, $post) {
        $blocks = array();

        if (! empty($pre)) {
            $blocks[] = array('attrs' => array(), 'innerHTML' => $pre);
        }

        foreach ($tokens as $token) {
            list($token, $html) = $token;

            $blocks[] = $token;

            if (!empty($html)) {
                $blocks[] = array('attrs' => array(), 'innerHTML' => $html);
            }
        }

        if (!empty($post)) {
            $blocks[] = array('attrs' => array(), 'innerHTML' => $post);
        }

        return $blocks;
    }
}
/* END global initializer code */

/* Syntax error exception */
if (!class_exists("PHPeggy\\SyntaxError", false)) {
    class SyntaxError extends \Exception
    {
        public $name = "SyntaxError";
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $location;

        public function __construct($message, $expected, $found, $offset, $line, $column, $location)
        {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->location = $location;
        }

        public function format($sources)
        {
            $str = $this->name . ": " . $this->message;
            if ($this->location) {
                $src = null;
                for ($k = 0; $k < count($sources); $k++) {
                    if ($sources[$k]["source"] === $this->location["source"]) {
                        $src = preg_split("/\r\n|\n|\r/", $sources[$k]["text"]);
                        break;
                    }
                }
                $s = $this->location["start"];
                $loc = $this->location["source"] . ":" . $s["line"] . ":" . $s["column"];
                if ($src) {
                    $e = $this->location["end"];
                    $filler = $this->peg_padEnd("", strlen($s["line"]));
                    $line = $src[$s["line"] - 1];
                    $last = $s["line"] === $e["line"] ? $e["column"] : strlen($line) + 1;
                    $str .= "\n --> " . $loc . "\n"
                        . $filler . " |\n"
                        . $s["line"] . " | " . $line . "\n"
                        . $filler . " | " . $this->peg_padEnd("", $s["column"] - 1)
                        . $this->peg_padEnd("", $last - $s["column"], "^");
                } else {
                    $str .= "\n at " . $loc;
                }
            }
            return $str;
        }

        private function peg_padEnd($str, $targetLength, $padString = " ") {
            if (strlen($str) > $targetLength) {
                return $str;
            }
            $targetLength -= strlen($str);
            $padString .= str_repeat($padString, $targetLength);
            return $str . substr($padString, 0, $targetLength);
        }
    }
}

class Parser
{
    private $peg_currPos = 0;
    private $peg_reportedPos = 0;
    private $peg_cachedPos = 0;
    private $peg_cachedPosDetails = array("line" => 1, "column" => 1, "seenCR" => false);
    private $peg_maxFailPos = 0;
    private $peg_maxFailExpected = array();
    private $peg_silentFails = 0;
    private $input = array();
    private $input_length = 0;
    private $peg_FAILED;
    private $peg_source;

    private $peg_l0;
    private $peg_l1;
    private $peg_l2;
    private $peg_l3;
    private $peg_l4;
    private $peg_l5;
    private $peg_l6;
    private $peg_l7;
    private $peg_l8;
    private $peg_l9;

    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;

    private $peg_e0;
    private $peg_e1;
    private $peg_e2;
    private $peg_e3;
    private $peg_e4;
    private $peg_e5;
    private $peg_e6;
    private $peg_e7;
    private $peg_e8;
    private $peg_e9;
    private $peg_e10;
    private $peg_e11;
    private $peg_e12;
    private $peg_e13;
    private $peg_e14;
    private $peg_e15;

    public function parse($input, ...$options)
    {
        $options = isset($options[0]) ? $options[0] : array();
        $this->cleanup_state();

        if (is_array($input)) {
            $this->input = $input;
        } else {
            preg_match_all("/./us", $input, $match);
            $this->input = $match[0];
        }
        $this->input_length = count($this->input);
        $this->peg_source = isset($options["grammarSource"]) ? $options["grammarSource"] : "";

        $old_regex_encoding = mb_regex_encoding();
        mb_regex_encoding("UTF-8");

        $this->peg_FAILED = new \stdClass;

        $this->peg_l0 = "<!--";
        $this->peg_l1 = "more";
        $this->peg_l2 = "-->";
        $this->peg_l3 = "<!--noteaser-->";
        $this->peg_l4 = "wp:";
        $this->peg_l5 = "/-->";
        $this->peg_l6 = "/wp:";
        $this->peg_l7 = "/";
        $this->peg_l8 = "{";
        $this->peg_l9 = "}";

        $this->peg_c0 = "/^[a-z]/";
        $this->peg_c1 = "/^[a-z0-9_-]/";
        $this->peg_c2 = "/^[ \\t\\r\\n]/";
        $this->peg_c3 = "/^[\\r\\n]/";
        $this->peg_c4 = "/^[ \\t]/";

        $this->peg_e0 = array("type" => "any", "description" => "any character");
        $this->peg_e1 = array("type" => "literal", "value" => "<!--", "description" => "\"<!--\"", "ignoreCase" => "false");
        $this->peg_e2 = array("type" => "literal", "value" => "more", "description" => "\"more\"", "ignoreCase" => "false");
        $this->peg_e3 = array("type" => "literal", "value" => "-->", "description" => "\"-->\"", "ignoreCase" => "false");
        $this->peg_e4 = array("type" => "literal", "value" => "<!--noteaser-->", "description" => "\"<!--noteaser-->\"", "ignoreCase" => "false");
        $this->peg_e5 = array("type" => "literal", "value" => "wp:", "description" => "\"wp:\"", "ignoreCase" => "false");
        $this->peg_e6 = array("type" => "literal", "value" => "/-->", "description" => "\"/-->\"", "ignoreCase" => "false");
        $this->peg_e7 = array("type" => "literal", "value" => "/wp:", "description" => "\"/wp:\"", "ignoreCase" => "false");
        $this->peg_e8 = array("type" => "literal", "value" => "/", "description" => "\"/\"", "ignoreCase" => "false");
        $this->peg_e9 = array("type" => "class", "value" => "[a-z]", "description" => "[a-z]", "ignoreCase" => "false");
        $this->peg_e10 = array("type" => "class", "value" => "[a-z0-9_-]", "description" => "[a-z0-9_-]", "ignoreCase" => "false");
        $this->peg_e11 = array("type" => "literal", "value" => "{", "description" => "\"{\"", "ignoreCase" => "false");
        $this->peg_e12 = array("type" => "literal", "value" => "}", "description" => "\"}\"", "ignoreCase" => "false");
        $this->peg_e13 = array("type" => "class", "value" => "[ \\t\\r\\n]", "description" => "[ \\t\\r\\n]", "ignoreCase" => "false");
        $this->peg_e14 = array("type" => "class", "value" => "[\\r\\n]", "description" => "[\\r\\n]", "ignoreCase" => "false");
        $this->peg_e15 = array("type" => "class", "value" => "[ \\t]", "description" => "[ \\t]", "ignoreCase" => "false");

        $peg_startRuleFunctions = array("Block_List" => array($this, "peg_parse_Block_List"));
        $peg_startRuleFunction = array($this, "peg_parse_Block_List");
        if (isset($options["startRule"])) {
            if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
                throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
            }

            $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
        }

        $peg_result = call_user_func($peg_startRuleFunction);

        mb_regex_encoding($old_regex_encoding);

        if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
            // Free up memory
            $this->cleanup_state();
            return $peg_result;
        }
        if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
            $this->peg_fail(array("type" => "end", "description" => "end of input"));
        }

        $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
        // Free up memory
        $this->cleanup_state();
        throw $exception;
    }

    private function cleanup_state()
    {
        $this->peg_currPos = 0;
        $this->peg_reportedPos = 0;
        $this->peg_cachedPos = 0;
        $this->peg_cachedPosDetails = array("line" => 1, "column" => 1, "seenCR" => false);
        $this->peg_maxFailPos = 0;
        $this->peg_maxFailExpected = array();
        $this->peg_silentFails = 0;
        $this->input = array();
        $this->input_length = 0;
        $this->peg_source = "";
    }

    private function input_substr($start, $length)
    {
        if ($length === 1 && $start < $this->input_length) {
            return $this->input[$start];
        }
        $substr = "";
        $max = min($start + $length, $this->input_length);
        for ($i = $start; $i < $max; $i++) {
            $substr .= $this->input[$i];
        }
        return $substr;
    }

    private function text()
    {
        return $this->input_substr($this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function offset()
    {
        return $this->peg_reportedPos;
    }

    private function range()
    {
        return array("source" => $this->peg_source, "start" => $this->peg_reportedPos, "end" => $this->peg_currPos);
    }

    private function location($fail = false)
    {
        $start = $this->peg_reportedPos;
        $end = $this->peg_currPos;
        if ($fail) {
            $start = $this->peg_maxFailPos;
            $end = $this->peg_maxFailPos + ($this->peg_maxFailPos < count($this->input) ? 1 : 0);
        }
        $compute_pd_start = $this->peg_computePosDetails($start);
        $compute_pd_end = $this->peg_computePosDetails($end);

        return array(
            "source" => $this->peg_source,
            "start" => array(
                "offset" => $start,
                "line" => $compute_pd_start["line"],
                "column" => $compute_pd_start["column"]
            ),
            "end" => array(
                "offset" => $end,
                "line" => $compute_pd_end["line"],
                "column" => $compute_pd_end["column"]
            )
        );
    }

    private function line()
    {
        $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
        return $compute_pd["line"];
    }

    private function column()
    {
        $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
        return $compute_pd["column"];
    }

    private function expected($description)
    {
        throw $this->peg_buildException(
            null,
            array(array("type" => "other", "description" => $description)),
            $this->peg_reportedPos
        );
    }

    private function error($message)
    {
        throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos)
    {
        for ($p = $startPos; $p < $endPos; $p++) {
            $ch = $this->input_substr($p, 1);
            if ($ch === "\n") {
                if (!$details["seenCR"]) { $details["line"]++; }
                $details["column"] = 1;
                $details["seenCR"] = false;
            } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
                $details["line"]++;
                $details["column"] = 1;
                $details["seenCR"] = true;
            } else {
                $details["column"]++;
                $details["seenCR"] = false;
            }
        }
    }

    private function peg_computePosDetails($pos)
    {
        if ($this->peg_cachedPos !== $pos) {
            if ($this->peg_cachedPos > $pos) {
                $this->peg_cachedPos = 0;
                $this->peg_cachedPosDetails = array("line" => 1, "column" => 1, "seenCR" => false);
            }
            $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
            $this->peg_cachedPos = $pos;
        }

        return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected)
    {
        if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

        if ($this->peg_currPos > $this->peg_maxFailPos) {
            $this->peg_maxFailPos = $this->peg_currPos;
            $this->peg_maxFailExpected = array();
        }

        $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b)
    {
        if ($a["description"] < $b["description"]) {
            return -1;
        } else if ($a["description"] > $b["description"]) {
            return 1;
        } else {
            return 0;
        }
    }

    private function peg_buildException($message, $expected, $pos)
    {
        $posDetails = $this->peg_computePosDetails($pos);
        $found = $pos < $this->input_length ? $this->input[$pos] : null;

        if ($expected !== null) {
            usort($expected, array($this, "peg_buildException_expectedComparator"));
            $i = 1;
            while ($i < count($expected)) {
                if ($expected[$i - 1] === $expected[$i]) {
                    array_splice($expected, $i, 1);
                } else {
                    $i++;
                }
            }
        }

        if ($message === null) {
            $expectedDescs = array_fill(0, count($expected), null);

            for ($i = 0; $i < count($expected); $i++) {
                $expectedDescs[$i] = $expected[$i]["description"];
            }

            $expectedDesc = count($expected) > 1
                ? join(", ", array_slice($expectedDescs, 0, -1))
                    . " or "
                    . $expectedDescs[count($expected) - 1]
                : $expectedDescs[0];

            $foundDesc = $found ? json_encode($found) : "end of input";

            $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
        }

        return new SyntaxError(
            $message,
            $expected,
            $found,
            $pos,
            $posDetails["line"],
            $posDetails["column"],
            $this->location(true)
        );
    }

    private function peg_f0($pre, $t, $html)
    {
        return array($t, $html);
    }

    private function peg_f1($pre, $ts, $post)
    {
        return peg_join_blocks($pre, $ts, $post);
    }

    private function peg_f2($text)
    {
        return $text;
    }

    private function peg_f3($customText, $noTeaser)
    {
        $attrs = array('noTeaser' => (bool) $noTeaser);
        if (!empty($customText)) {
            $attrs['customText'] = $customText;
        }
        return array(
            'blockName' => 'core/more',
            'attrs' => $attrs,
            'innerHTML' => '',
            'outerHTML' => $this->text(),
        );
    }

    private function peg_f4($blockName, $a)
    {
        return $a;
    }

    private function peg_f5($blockName, $attrs)
    {
        return array(
            'blockName' => $blockName,
            'attrs' => $attrs,
            'innerBlocks' => array(),
            'innerHTML' => '',
            'outerHTML' => $this->text(),
        );
    }

    private function peg_f6($s, $children, $e)
    {
        list($innerHTML, $innerBlocks) = peg_array_partition($children, 'is_string');

        return array(
            'blockName' => $s['blockName'],
            'attrs' => $s['attrs'],
            'innerBlocks' => $innerBlocks,
            'innerHTML' => implode('', $innerHTML),
            'outerHTML' => $this->text(),
        );
    }

    private function peg_f7($blockName, $attrs)
    {
        return array(
            'blockName' => $blockName,
            'attrs' => $attrs,
        );
    }

    private function peg_f8($blockName)
    {
        return array(
            'blockName' => $blockName,
        );
    }

    private function peg_f9($type)
    {
        return "core/$type";
    }

    private function peg_f10($attrs)
    {
        return json_decode($attrs, true);
    }

    private function peg_parse_Block_List()
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parse_Token();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
            $s4 = null;
        } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
            if ($this->input_length > $this->peg_currPos) {
                $s5 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e0);
                }
            }
            if ($s5 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5);
                $s3 = $s4;
            } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_currPos;
            $s4 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s5 = $this->peg_parse_Token();
            $this->peg_silentFails--;
            if ($s5 === $this->peg_FAILED) {
                $s4 = null;
            } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
                if ($this->input_length > $this->peg_currPos) {
                    $s5 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s5 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e0);
                    }
                }
                if ($s5 !== $this->peg_FAILED) {
                    $s4 = array($s4, $s5);
                    $s3 = $s4;
                } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
            }
        }
        $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_Token();
        if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_currPos;
            $s6 = array();
            $s7 = $this->peg_currPos;
            $s8 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s9 = $this->peg_parse_Token();
            $this->peg_silentFails--;
            if ($s9 === $this->peg_FAILED) {
                $s8 = null;
            } else {
                $this->peg_currPos = $s8;
                $s8 = $this->peg_FAILED;
            }
            if ($s8 !== $this->peg_FAILED) {
                if ($this->input_length > $this->peg_currPos) {
                    $s9 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s9 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e0);
                    }
                }
                if ($s9 !== $this->peg_FAILED) {
                    $s8 = array($s8, $s9);
                    $s7 = $s8;
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s7;
                $s7 = $this->peg_FAILED;
            }
            while ($s7 !== $this->peg_FAILED) {
                $s6[] = $s7;
                $s7 = $this->peg_currPos;
                $s8 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s9 = $this->peg_parse_Token();
                $this->peg_silentFails--;
                if ($s9 === $this->peg_FAILED) {
                    $s8 = null;
                } else {
                    $this->peg_currPos = $s8;
                    $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                    if ($this->input_length > $this->peg_currPos) {
                        $s9 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e0);
                        }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        $s8 = array($s8, $s9);
                        $s7 = $s8;
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
            }
            $s5 = $this->input_substr($s5, $this->peg_currPos - $s5);
            $this->peg_reportedPos = $s3;
            $s3 = $this->peg_f0($s1, $s4, $s5);
        } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_currPos;
            $s4 = $this->peg_parse_Token();
            if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_currPos;
                $s6 = array();
                $s7 = $this->peg_currPos;
                $s8 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s9 = $this->peg_parse_Token();
                $this->peg_silentFails--;
                if ($s9 === $this->peg_FAILED) {
                    $s8 = null;
                } else {
                    $this->peg_currPos = $s8;
                    $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                    if ($this->input_length > $this->peg_currPos) {
                        $s9 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e0);
                        }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        $s8 = array($s8, $s9);
                        $s7 = $s8;
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
                while ($s7 !== $this->peg_FAILED) {
                    $s6[] = $s7;
                    $s7 = $this->peg_currPos;
                    $s8 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    $s9 = $this->peg_parse_Token();
                    $this->peg_silentFails--;
                    if ($s9 === $this->peg_FAILED) {
                        $s8 = null;
                    } else {
                        $this->peg_currPos = $s8;
                        $s8 = $this->peg_FAILED;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                        if ($this->input_length > $this->peg_currPos) {
                            $s9 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s9 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e0);
                            }
                        }
                        if ($s9 !== $this->peg_FAILED) {
                            $s8 = array($s8, $s9);
                            $s7 = $s8;
                        } else {
                            $this->peg_currPos = $s7;
                            $s7 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                }
                $s5 = $this->input_substr($s5, $this->peg_currPos - $s5);
                $this->peg_reportedPos = $s3;
                $s3 = $this->peg_f0($s1, $s4, $s5);
            } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
            }
        }
        $s3 = $this->peg_currPos;
        $s4 = array();
        if ($this->input_length > $this->peg_currPos) {
            $s5 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e0);
            }
        }
        while ($s5 !== $this->peg_FAILED) {
            $s4[] = $s5;
            if ($this->input_length > $this->peg_currPos) {
                $s5 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e0);
                }
            }
        }
        $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
        $this->peg_reportedPos = $s0;
        $s0 = $this->peg_f1($s1, $s2, $s3);

        return $s0;
    }

    private function peg_parse_Token()
    {
        $s0 = $this->peg_parse_Tag_More();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_Block_Void();
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parse_Block_Balanced();
            }
        }

        return $s0;
    }

    private function peg_parse_Tag_More()
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l0) {
            $s1 = $this->peg_l0;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e1);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = array();
            $s3 = $this->peg_parse_WS();
            while ($s3 !== $this->peg_FAILED) {
                $s2[] = $s3;
                $s3 = $this->peg_parse_WS();
            }
            if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l1) {
                $s3 = $this->peg_l1;
                $this->peg_currPos += 4;
            } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e2);
                }
            }
            if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_currPos;
                $s5 = array();
                $s6 = $this->peg_parse_WS();
                if ($s6 !== $this->peg_FAILED) {
                    while ($s6 !== $this->peg_FAILED) {
                        $s5[] = $s6;
                        $s6 = $this->peg_parse_WS();
                    }
                } else {
                    $s5 = $this->peg_FAILED;
                }
                if ($s5 !== $this->peg_FAILED) {
                    $s6 = $this->peg_currPos;
                    $s7 = array();
                    $s8 = $this->peg_currPos;
                    $s9 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    $s10 = $this->peg_currPos;
                    $s11 = array();
                    $s12 = $this->peg_parse_WS();
                    while ($s12 !== $this->peg_FAILED) {
                        $s11[] = $s12;
                        $s12 = $this->peg_parse_WS();
                    }
                    if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                        $s12 = $this->peg_l2;
                        $this->peg_currPos += 3;
                    } else {
                        $s12 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e3);
                        }
                    }
                    if ($s12 !== $this->peg_FAILED) {
                        $s11 = array($s11, $s12);
                        $s10 = $s11;
                    } else {
                        $this->peg_currPos = $s10;
                        $s10 = $this->peg_FAILED;
                    }
                    $this->peg_silentFails--;
                    if ($s10 === $this->peg_FAILED) {
                        $s9 = null;
                    } else {
                        $this->peg_currPos = $s9;
                        $s9 = $this->peg_FAILED;
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        if ($this->input_length > $this->peg_currPos) {
                            $s10 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s10 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e0);
                            }
                        }
                        if ($s10 !== $this->peg_FAILED) {
                            $s9 = array($s9, $s10);
                            $s8 = $s9;
                        } else {
                            $this->peg_currPos = $s8;
                            $s8 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s8;
                        $s8 = $this->peg_FAILED;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                        while ($s8 !== $this->peg_FAILED) {
                            $s7[] = $s8;
                            $s8 = $this->peg_currPos;
                            $s9 = $this->peg_currPos;
                            $this->peg_silentFails++;
                            $s10 = $this->peg_currPos;
                            $s11 = array();
                            $s12 = $this->peg_parse_WS();
                            while ($s12 !== $this->peg_FAILED) {
                                $s11[] = $s12;
                                $s12 = $this->peg_parse_WS();
                            }
                            if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                                $s12 = $this->peg_l2;
                                $this->peg_currPos += 3;
                            } else {
                                $s12 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e3);
                                }
                            }
                            if ($s12 !== $this->peg_FAILED) {
                                $s11 = array($s11, $s12);
                                $s10 = $s11;
                            } else {
                                $this->peg_currPos = $s10;
                                $s10 = $this->peg_FAILED;
                            }
                            $this->peg_silentFails--;
                            if ($s10 === $this->peg_FAILED) {
                                $s9 = null;
                            } else {
                                $this->peg_currPos = $s9;
                                $s9 = $this->peg_FAILED;
                            }
                            if ($s9 !== $this->peg_FAILED) {
                                if ($this->input_length > $this->peg_currPos) {
                                    $s10 = $this->input_substr($this->peg_currPos, 1);
                                    $this->peg_currPos++;
                                } else {
                                    $s10 = $this->peg_FAILED;
                                    if ($this->peg_silentFails === 0) {
                                        $this->peg_fail($this->peg_e0);
                                    }
                                }
                                if ($s10 !== $this->peg_FAILED) {
                                    $s9 = array($s9, $s10);
                                    $s8 = $s9;
                                } else {
                                    $this->peg_currPos = $s8;
                                    $s8 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s8;
                                $s8 = $this->peg_FAILED;
                            }
                        }
                    } else {
                        $s7 = $this->peg_FAILED;
                    }
                    if ($s7 !== $this->peg_FAILED) {
                        $s6 = $this->input_substr($s6, $this->peg_currPos - $s6);
                    } else {
                        $s6 = $s7;
                    }
                    if ($s6 !== $this->peg_FAILED) {
                        $this->peg_reportedPos = $s4;
                        $s4 = $this->peg_f2($s6);
                    } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_FAILED;
                }
                if ($s4 === $this->peg_FAILED) {
                    $s4 = null;
                }
                $s5 = array();
                $s6 = $this->peg_parse_WS();
                while ($s6 !== $this->peg_FAILED) {
                    $s5[] = $s6;
                    $s6 = $this->peg_parse_WS();
                }
                if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                    $s6 = $this->peg_l2;
                    $this->peg_currPos += 3;
                } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e3);
                    }
                }
                if ($s6 !== $this->peg_FAILED) {
                    $s7 = $this->peg_currPos;
                    $s8 = array();
                    $s9 = $this->peg_parse_WS();
                    while ($s9 !== $this->peg_FAILED) {
                        $s8[] = $s9;
                        $s9 = $this->peg_parse_WS();
                    }
                    if ($this->input_substr($this->peg_currPos, 15) === $this->peg_l3) {
                        $s9 = $this->peg_l3;
                        $this->peg_currPos += 15;
                    } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e4);
                        }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        $s8 = array($s8, $s9);
                        $s7 = $s8;
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                    if ($s7 === $this->peg_FAILED) {
                        $s7 = null;
                    }
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f3($s4, $s7);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_Void()
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l0) {
            $s1 = $this->peg_l0;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e1);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = array();
            $s3 = $this->peg_parse_WS();
            if ($s3 !== $this->peg_FAILED) {
                while ($s3 !== $this->peg_FAILED) {
                    $s2[] = $s3;
                    $s3 = $this->peg_parse_WS();
                }
            } else {
                $s2 = $this->peg_FAILED;
            }
            if ($s2 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l4) {
                    $s3 = $this->peg_l4;
                    $this->peg_currPos += 3;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e5);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parse_Block_Name();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = array();
                        $s6 = $this->peg_parse_WS();
                        if ($s6 !== $this->peg_FAILED) {
                            while ($s6 !== $this->peg_FAILED) {
                                $s5[] = $s6;
                                $s6 = $this->peg_parse_WS();
                            }
                        } else {
                            $s5 = $this->peg_FAILED;
                        }
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_currPos;
                            $s7 = $this->peg_parse_Block_Attributes();
                            if ($s7 !== $this->peg_FAILED) {
                                $s8 = array();
                                $s9 = $this->peg_parse_WS();
                                if ($s9 !== $this->peg_FAILED) {
                                    while ($s9 !== $this->peg_FAILED) {
                                        $s8[] = $s9;
                                        $s9 = $this->peg_parse_WS();
                                    }
                                } else {
                                    $s8 = $this->peg_FAILED;
                                }
                                if ($s8 !== $this->peg_FAILED) {
                                    $this->peg_reportedPos = $s6;
                                    $s6 = $this->peg_f4($s4, $s7);
                                } else {
                                    $this->peg_currPos = $s6;
                                    $s6 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s6;
                                $s6 = $this->peg_FAILED;
                            }
                            if ($s6 === $this->peg_FAILED) {
                                $s6 = null;
                            }
                            if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l5) {
                                $s7 = $this->peg_l5;
                                $this->peg_currPos += 4;
                            } else {
                                $s7 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e6);
                                }
                            }
                            if ($s7 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s0 = $this->peg_f5($s4, $s6);
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_Balanced()
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_Block_Start();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = array();
            $s3 = $this->peg_parse_Token();
            if ($s3 === $this->peg_FAILED) {
                $s3 = $this->peg_currPos;
                $s4 = $this->peg_currPos;
                $s5 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s6 = $this->peg_parse_Block_End();
                $this->peg_silentFails--;
                if ($s6 === $this->peg_FAILED) {
                    $s5 = null;
                } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                }
                if ($s5 !== $this->peg_FAILED) {
                    if ($this->input_length > $this->peg_currPos) {
                        $s6 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s6 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e0);
                        }
                    }
                    if ($s6 !== $this->peg_FAILED) {
                        $s5 = array($s5, $s6);
                        $s4 = $s5;
                    } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_FAILED;
                }
                if ($s4 !== $this->peg_FAILED) {
                    $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
                } else {
                    $s3 = $s4;
                }
            }
            while ($s3 !== $this->peg_FAILED) {
                $s2[] = $s3;
                $s3 = $this->peg_parse_Token();
                if ($s3 === $this->peg_FAILED) {
                    $s3 = $this->peg_currPos;
                    $s4 = $this->peg_currPos;
                    $s5 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    $s6 = $this->peg_parse_Block_End();
                    $this->peg_silentFails--;
                    if ($s6 === $this->peg_FAILED) {
                        $s5 = null;
                    } else {
                        $this->peg_currPos = $s5;
                        $s5 = $this->peg_FAILED;
                    }
                    if ($s5 !== $this->peg_FAILED) {
                        if ($this->input_length > $this->peg_currPos) {
                            $s6 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s6 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e0);
                            }
                        }
                        if ($s6 !== $this->peg_FAILED) {
                            $s5 = array($s5, $s6);
                            $s4 = $s5;
                        } else {
                            $this->peg_currPos = $s4;
                            $s4 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_FAILED;
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
                    } else {
                        $s3 = $s4;
                    }
                }
            }
            $s3 = $this->peg_parse_Block_End();
            if ($s3 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s0 = $this->peg_f6($s1, $s2, $s3);
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_Start()
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l0) {
            $s1 = $this->peg_l0;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e1);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = array();
            $s3 = $this->peg_parse_WS();
            if ($s3 !== $this->peg_FAILED) {
                while ($s3 !== $this->peg_FAILED) {
                    $s2[] = $s3;
                    $s3 = $this->peg_parse_WS();
                }
            } else {
                $s2 = $this->peg_FAILED;
            }
            if ($s2 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l4) {
                    $s3 = $this->peg_l4;
                    $this->peg_currPos += 3;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e5);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parse_Block_Name();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = array();
                        $s6 = $this->peg_parse_WS();
                        if ($s6 !== $this->peg_FAILED) {
                            while ($s6 !== $this->peg_FAILED) {
                                $s5[] = $s6;
                                $s6 = $this->peg_parse_WS();
                            }
                        } else {
                            $s5 = $this->peg_FAILED;
                        }
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_currPos;
                            $s7 = $this->peg_parse_Block_Attributes();
                            if ($s7 !== $this->peg_FAILED) {
                                $s8 = array();
                                $s9 = $this->peg_parse_WS();
                                if ($s9 !== $this->peg_FAILED) {
                                    while ($s9 !== $this->peg_FAILED) {
                                        $s8[] = $s9;
                                        $s9 = $this->peg_parse_WS();
                                    }
                                } else {
                                    $s8 = $this->peg_FAILED;
                                }
                                if ($s8 !== $this->peg_FAILED) {
                                    $this->peg_reportedPos = $s6;
                                    $s6 = $this->peg_f4($s4, $s7);
                                } else {
                                    $this->peg_currPos = $s6;
                                    $s6 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s6;
                                $s6 = $this->peg_FAILED;
                            }
                            if ($s6 === $this->peg_FAILED) {
                                $s6 = null;
                            }
                            if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                                $s7 = $this->peg_l2;
                                $this->peg_currPos += 3;
                            } else {
                                $s7 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e3);
                                }
                            }
                            if ($s7 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s0 = $this->peg_f7($s4, $s6);
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_End()
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l0) {
            $s1 = $this->peg_l0;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e1);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = array();
            $s3 = $this->peg_parse_WS();
            if ($s3 !== $this->peg_FAILED) {
                while ($s3 !== $this->peg_FAILED) {
                    $s2[] = $s3;
                    $s3 = $this->peg_parse_WS();
                }
            } else {
                $s2 = $this->peg_FAILED;
            }
            if ($s2 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l6) {
                    $s3 = $this->peg_l6;
                    $this->peg_currPos += 4;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e7);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parse_Block_Name();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = array();
                        $s6 = $this->peg_parse_WS();
                        if ($s6 !== $this->peg_FAILED) {
                            while ($s6 !== $this->peg_FAILED) {
                                $s5[] = $s6;
                                $s6 = $this->peg_parse_WS();
                            }
                        } else {
                            $s5 = $this->peg_FAILED;
                        }
                        if ($s5 !== $this->peg_FAILED) {
                            if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                                $s6 = $this->peg_l2;
                                $this->peg_currPos += 3;
                            } else {
                                $s6 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e3);
                                }
                            }
                            if ($s6 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s0 = $this->peg_f8($s4);
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_Name()
    {
        $s0 = $this->peg_parse_Namespaced_Block_Name();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_Core_Block_Name();
        }

        return $s0;
    }

    private function peg_parse_Namespaced_Block_Name()
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_Block_Name_Part();
        if ($s2 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l7) {
                $s3 = $this->peg_l7;
                $this->peg_currPos++;
            } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e8);
                }
            }
            if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parse_Block_Name_Part();
                if ($s4 !== $this->peg_FAILED) {
                    $s2 = array($s2, $s3, $s4);
                    $s1 = $s2;
                } else {
                    $this->peg_currPos = $s1;
                    $s1 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
        } else {
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parse_Core_Block_Name()
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_Block_Name_Part();
        if ($s2 !== $this->peg_FAILED) {
            $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
        } else {
            $s1 = $s2;
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f9($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_Block_Name_Part()
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        if (peg_regex_test($this->peg_c0, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e9);
            }
        }
        if ($s2 !== $this->peg_FAILED) {
            $s3 = array();
            if (peg_regex_test($this->peg_c1, $this->input_substr($this->peg_currPos, 1))) {
                $s4 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e10);
                }
            }
            while ($s4 !== $this->peg_FAILED) {
                $s3[] = $s4;
                if (peg_regex_test($this->peg_c1, $this->input_substr($this->peg_currPos, 1))) {
                    $s4 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s4 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e10);
                    }
                }
            }
            $s2 = array($s2, $s3);
            $s1 = $s2;
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
        } else {
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parse_Block_Attributes()
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l8) {
            $s3 = $this->peg_l8;
            $this->peg_currPos++;
        } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e11);
            }
        }
        if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            $s5 = $this->peg_currPos;
            $s6 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s7 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l9) {
                $s8 = $this->peg_l9;
                $this->peg_currPos++;
            } else {
                $s8 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e12);
                }
            }
            if ($s8 !== $this->peg_FAILED) {
                $s9 = array();
                $s10 = $this->peg_parse_WS();
                if ($s10 !== $this->peg_FAILED) {
                    while ($s10 !== $this->peg_FAILED) {
                        $s9[] = $s10;
                        $s10 = $this->peg_parse_WS();
                    }
                } else {
                    $s9 = $this->peg_FAILED;
                }
                if ($s9 !== $this->peg_FAILED) {
                    $s10 = "";
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l7) {
                        $s11 = $this->peg_l7;
                        $this->peg_currPos++;
                    } else {
                        $s11 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e8);
                        }
                    }
                    if ($s11 === $this->peg_FAILED) {
                        $s11 = null;
                    }
                    if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                        $s12 = $this->peg_l2;
                        $this->peg_currPos += 3;
                    } else {
                        $s12 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e3);
                        }
                    }
                    if ($s12 !== $this->peg_FAILED) {
                        $s8 = array($s8, $s9, $s10, $s11, $s12);
                        $s7 = $s8;
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s7;
                $s7 = $this->peg_FAILED;
            }
            $this->peg_silentFails--;
            if ($s7 === $this->peg_FAILED) {
                $s6 = null;
            } else {
                $this->peg_currPos = $s6;
                $s6 = $this->peg_FAILED;
            }
            if ($s6 !== $this->peg_FAILED) {
                if ($this->input_length > $this->peg_currPos) {
                    $s7 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e0);
                    }
                }
                if ($s7 !== $this->peg_FAILED) {
                    $s6 = array($s6, $s7);
                    $s5 = $s6;
                } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
            }
            while ($s5 !== $this->peg_FAILED) {
                $s4[] = $s5;
                $s5 = $this->peg_currPos;
                $s6 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s7 = $this->peg_currPos;
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l9) {
                    $s8 = $this->peg_l9;
                    $this->peg_currPos++;
                } else {
                    $s8 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e12);
                    }
                }
                if ($s8 !== $this->peg_FAILED) {
                    $s9 = array();
                    $s10 = $this->peg_parse_WS();
                    if ($s10 !== $this->peg_FAILED) {
                        while ($s10 !== $this->peg_FAILED) {
                            $s9[] = $s10;
                            $s10 = $this->peg_parse_WS();
                        }
                    } else {
                        $s9 = $this->peg_FAILED;
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        $s10 = "";
                        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l7) {
                            $s11 = $this->peg_l7;
                            $this->peg_currPos++;
                        } else {
                            $s11 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e8);
                            }
                        }
                        if ($s11 === $this->peg_FAILED) {
                            $s11 = null;
                        }
                        if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                            $s12 = $this->peg_l2;
                            $this->peg_currPos += 3;
                        } else {
                            $s12 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e3);
                            }
                        }
                        if ($s12 !== $this->peg_FAILED) {
                            $s8 = array($s8, $s9, $s10, $s11, $s12);
                            $s7 = $s8;
                        } else {
                            $this->peg_currPos = $s7;
                            $s7 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
                $this->peg_silentFails--;
                if ($s7 === $this->peg_FAILED) {
                    $s6 = null;
                } else {
                    $this->peg_currPos = $s6;
                    $s6 = $this->peg_FAILED;
                }
                if ($s6 !== $this->peg_FAILED) {
                    if ($this->input_length > $this->peg_currPos) {
                        $s7 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s7 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e0);
                        }
                    }
                    if ($s7 !== $this->peg_FAILED) {
                        $s6 = array($s6, $s7);
                        $s5 = $s6;
                    } else {
                        $this->peg_currPos = $s5;
                        $s5 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                }
            }
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l9) {
                $s5 = $this->peg_l9;
                $this->peg_currPos++;
            } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e12);
                }
            }
            if ($s5 !== $this->peg_FAILED) {
                $s3 = array($s3, $s4, $s5);
                $s2 = $s3;
            } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
            $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
        } else {
            $s1 = $s2;
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f10($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_WS()
    {
        if (peg_regex_test($this->peg_c2, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e13);
            }
        }

        return $s0;
    }

    private function peg_parse_Newline()
    {
        if (peg_regex_test($this->peg_c3, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e14);
            }
        }

        return $s0;
    }

    private function peg_parse__()
    {
        if (peg_regex_test($this->peg_c4, $this->input_substr($this->peg_currPos, 1))) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e15);
            }
        }

        return $s0;
    }

    private function peg_parse___()
    {
        $s0 = array();
        $s1 = $this->peg_parse__();
        if ($s1 !== $this->peg_FAILED) {
            while ($s1 !== $this->peg_FAILED) {
                $s0[] = $s1;
                $s1 = $this->peg_parse__();
            }
        } else {
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Any()
    {
        if ($this->input_length > $this->peg_currPos) {
            $s0 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e0);
            }
        }

        return $s0;
    }
};
